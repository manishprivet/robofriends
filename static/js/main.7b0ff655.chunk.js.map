{"version":3,"sources":["components/SearchBox.js","components/Card.js","components/CardList.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["SearchBox","searchChange","className","type","placeholder","onChange","Card","id","name","email","src","alt","CardList","robots","map","user","key","toString","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","this","setState","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","React","connect","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.7b0ff655.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction SearchBox({searchChange}) {\r\n    return (\r\n        <div className='pa2'>\r\n            <input\r\n                className = \"pa3 ba b--green bg-lightest-blue\"\r\n                type=\"text\" \r\n                placeholder=\"Search Robots\" \r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nfunction Card({id, name, email}) {\r\n    return (\r\n        <div className='bg-light-green dib br3 pa3 ma3 grow bw2 shadow-5'>\r\n            <img src={`https://robohash.org/${id}?200x200`} alt={`${name}-RobotImage`}/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <h3>{email}</h3>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nfunction CardList({ robots }) {\r\n    return (\r\n        <div>\r\n            {\r\n                robots.map(user => {\r\n                    return <Card\r\n                        key={user.id.toString()}\r\n                        id={user.id}\r\n                        name={user.name}\r\n                        email={user.email}\r\n                    />\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\nimport './Scroll.css'\r\n\r\nfunction Scroll(props) {\r\n    return (\r\n        <div style = {{overflowY: 'scroll', border: '1px solid black', height: '70vh'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch() {\r\n        this.setState({hasError: true});\r\n    }\r\n\r\n    render() {\r\n        const { hasError } = this.state;\r\n        if(hasError) {\r\n            return <h1>Oops</h1>\r\n        } else {\r\n            return this.props.children;\r\n        }\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport SearchBox from '../components/SearchBox';\r\nimport CardList from '../components/CardList';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary'\r\nimport './App.css';\r\n\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatcToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nclass App extends React.Component {\r\n    // constructor() {\r\n    //     super();\r\n    //     this.state = {\r\n    //         robots: [],\r\n    //         // searchField:  ''\r\n    //     };\r\n    // }\r\n\r\n    componentDidMount() {\r\n        //console.log(this.props.store.getState());\r\n\r\n        // fetch('https://jsonplaceholder.typicode.com/users')\r\n        //     .then(response => response.json())\r\n        //     .then(users => this.setState({ robots: users}))\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    // onSearchChange = (event) => {\r\n    //     this.setState({ searchField: event.target.value});\r\n    // }\r\n\r\n    render() {\r\n        // const {robots} = this.state;\r\n        const {searchField, onSearchChange, robots, isPending} = this.props;\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        })\r\n        if(isPending) {\r\n            return (\r\n                <div className=\"loadingAnimation\">\r\n                    <div className=\"sk-chase\">\r\n                        <div className=\"sk-chase-dot\"></div>\r\n                        <div className=\"sk-chase-dot\"></div>\r\n                        <div className=\"sk-chase-dot\"></div>\r\n                        <div className=\"sk-chase-dot\"></div>\r\n                        <div className=\"sk-chase-dot\"></div>\r\n                        <div className=\"sk-chase-dot\"></div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <div className=\"tc\">\r\n                    <h1 className=\"f1\">ROBOFRIENDS</h1>\r\n                    <SearchBox searchChange = {onSearchChange}/>\r\n                    <Scroll>\r\n                        <ErrorBoundary>\r\n                            <CardList robots={filteredRobots} />\r\n                        </ErrorBoundary>\r\n                    </Scroll>                \r\n                 </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatcToProps)(App);","import { \r\n    CHANGE_SEARCHFIELD,\r\n    REQUEST_ROBOTS_FAILED,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS\r\n } from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCHFIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n        .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}));\r\n}","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { \r\n    CHANGE_SEARCHFIELD,\r\n    REQUEST_ROBOTS_FAILED,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS\r\n } from './constants';\r\n\r\nconst initialStateSearch = {\r\n    searchField: '',\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n    switch(action.type) {\r\n        case  CHANGE_SEARCHFIELD:\r\n            return { ...state, searchField: action.payload};\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return { ...state, isPending: true};\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return { ...state, robots: action.payload, isPending: false};\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return { ...state, error: action.payload, isPending: false}\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\n// import { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport App from './containers/App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers';\n\n// const logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store = {store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}